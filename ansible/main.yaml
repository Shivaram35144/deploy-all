---
#WORKS ONLY FOR AMAZON LINUX 

- name: Configure ec2-inst-1 from scratch
  hosts: all
  become: yes
  vars_files:
    - variables.yaml
  tasks:
    #1 Install stuff
    - name: Install Docker, Git, Java, Jenkins
      yum:
        name: 
          - docker
          - git
          - java-11-openjdk 
          - jenkins
        state: present 
        update_cache: true
    # 2. Start the Services
    - name: Start Docker Service
      service:
        name: docker
        state: started
        enabled: true
    - name: Start Jenkins Service
      service:
        name: jenkins
        state: started
        enabled: true
    
    
    
    # Configure Jenkins
    - name: Install Jenkins plugins
      jenkins_plugin:
        name: 
          - workflow-aggregator
          - github
          - docker-workflow
          - pipeline-github
        state: present
      notify: restart jenkins

    - name: Restart Jenkins (if needed)
      service:
        name: jenkins
        state: restarted
      when: ansible_facts.packages['jenkins'] is defined

    - name: Wait for Jenkins to come online
      uri:
        url: http://localhost:8080
        status_code: 200
      retries: 10
      delay: 15
      register: jenkins_status
      until: jenkins_status.status == 200

    
    
    
    
    # 3. Add ec2 user to the docker group
    - name: Add ec2-user to docker group
      command: usermod -aG docker ec2-user

    # 4. Pull the docker images from the docker hub
    - name: Run Docker container for Spring Boot API 1
      docker_container:
        name: springboot-api-1
        image: "{{ springboot_api_1_image }}:{{ springboot_api_1_tag }}"
        state: started
        ports:
          - "8081:8080"

    - name: Run Docker container for Spring Boot API 2
      docker_container:
        name: springboot-api-2
        image: "{{ springboot_api_2_image }}:{{ springboot_api_2_tag }}"
        state: started
        ports:
          - "8082:8080"
    
    5. Output the running containers

    - name: Output running containers
      command: docker ps
      register: docker_ps_output

    - name: Display running containers
      debug:
        var: docker_ps_output.stdout_lines

    - name: Write running containers to a file
      copy:
        content: "{{ docker_ps_output.stdout }}"
        dest: /ansibleOutput/docker_ps_output.txt